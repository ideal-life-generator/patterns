// Generated by CoffeeScript 1.8.0
var Item, Jackets, Shoes, jackets, jacketsClothing, shoes, shoesOxfords,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Item = (function() {
  function Item() {}

  Item.prototype.createItem = function(type) {
    var item;
    item = this.createType(type);
    item.getInfo();
    item.setTime();
    return item;
  };

  Item.prototype.createType = function(type) {
    return new Error("This is abstract class");
  };

  return Item;

})();

Shoes = (function(_super) {
  __extends(Shoes, _super);

  function Shoes() {
    return Shoes.__super__.constructor.apply(this, arguments);
  }

  Shoes.prototype.createType = function(type) {
    switch (type) {
      case "Oxfords":
        return new ShoesOxfords();
      case "Boots":
        return new ShoesBoots();
      default:
        return new ShoesUncathegory();
    }
  };

  return Shoes;

})(Item);

Jackets = (function(_super) {
  __extends(Jackets, _super);

  function Jackets() {
    return Jackets.__super__.constructor.apply(this, arguments);
  }

  Jackets.prototype.createType = function(type) {
    switch (type) {
      case "Clothing":
        return new JacketsClothing();
      case "Watches":
        return new JacketsWatches();
      default:
        return new JacketsUncathegory();
    }
  };

  return Jackets;

})(Item);

shoes = new Shoes();

shoesOxfords = shoes.createType("Oxfords");

jackets = new Jackets();

jacketsClothing = jackets.createType("Clothing");
