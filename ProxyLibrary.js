// Generated by CoffeeScript 1.8.0
var Book, DirectoryProxy, DynamicProxy, PersonnelDirectory, PublicLibrary, PublicLibraryProxy, PublicLibraryVirtualProxy, StatsProxy, TestProxy, WebService, callback, xhrHandler,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Book = (function() {
  function Book(isbn, title, author) {}

  return Book;

})();

PublicLibrary = (function() {
  function PublicLibrary(books) {
    var book, _i, _len;
    this.catalog = {};
    for (_i = 0, _len = books.length; _i < _len; _i++) {
      book = books[_i];
      this.catalog[book.getIsbn()] = {
        book: book,
        avaliable: true
      };
    }
  }

  PublicLibrary.prototype.findBooks = function(searchString) {
    var book, isbn, _ref, _results;
    _ref = this.catalog;
    _results = [];
    for (isbn in _ref) {
      if (!__hasProp.call(_ref, isbn)) continue;
      book = _ref[isbn];
      if (searchString.match(book.getTitle()) || searchString.match(book.getAuthor())) {
        _results.push(book);
      }
    }
    return _results;
  };

  PublicLibrary.prototype.checkoutBook = function(book) {
    var isbn;
    isbn = book.getIsbn();
    if (this.catalog[isbn]) {
      if (this.catalog[isbn].avaliable) {
        this.catalog[isbn].avaliable = false;
        return this.catalog[isbn];
      } else {
        throw new Error("PublikLibrary: book " + (book.getTitle()) + " is not currently available.");
      }
    } else {
      throw new Error("PublikLibrary: book " + (book.getTitle()) + " not found.");
    }
  };

  PublicLibrary.prototype.returnBook = function(book) {
    var isbn;
    isbn = book.getIsbn();
    if (this.catalog[isbn]) {
      return this.catalog[isbn].avaliable = true;
    } else {
      throw new Error("PublikLibrary: book " + (book.getTitle()) + " not found.");
    }
  };

  return PublicLibrary;

})();

PublicLibraryProxy = (function() {
  function PublicLibraryProxy(catalog) {
    this.library = new PublikLibrary(catalog);
  }

  PublicLibraryProxy.prototype.findBooks = function(searchString) {
    return this.library.findBooks(searchString);
  };

  PublicLibraryProxy.prototype.checkoutBook = function(book) {
    return this.library.checkoutBook(book);
  };

  PublicLibraryProxy.prototype.returnBook = function(book) {
    return this.library.returnBook(book);
  };

  return PublicLibraryProxy;

})();

PublicLibraryVirtualProxy = (function() {
  function PublicLibraryVirtualProxy(catalog) {
    this.catalog = catalog;
  }

  PublicLibraryVirtualProxy.prototype._initializeLibrary = function() {
    var _ref;
    return (_ref = this.library) != null ? _ref : new PublikLibrary(this.catalog);
  };

  PublicLibraryVirtualProxy.prototype.findBooks = function(searchString) {
    this._initializeLibrary();
    return this.library.findBooks(searchString);
  };

  PublicLibraryVirtualProxy.prototype.checkoutBook = function(book) {
    this._initializeLibrary();
    return this.library.checkoutBook(book);
  };

  PublicLibraryVirtualProxy.prototype.returnBook = function(book) {
    this._initializeLibrary();
    return this.library.returnBook(book);
  };

  return PublicLibraryVirtualProxy;

})();

xhrHandler = XhrManager.createXhrHandler;

callback = {
  success: function(responseText) {
    var stats;
    stats = eval("(" + responseText + ")");
    return displayPageviews(stats);
  },
  failture: function(statusCode) {
    throw new Error("Asynchronous request for stats failed.");
  }
};

xhrHandler.request("GET", "/stats/getPageviews/?page=index.html", callback);

callback = {
  success: function(responseText) {
    var stats;
    stats = eval("(" + responseText + ")");
    return displayBrowserShare(stats);
  },
  failture: function(statusCode) {
    throw new Error("Asynchronous request for stats failed.");
  }
};

xhrHandler.request("GET", "/stats/getBrowserShare/?page=index.html", callback);

StatsProxy = (function() {
  var fetchData, urls, xhrFailure;
  xhrHandler = XhrManager.createXhrHandler();
  urls = {
    pageviews: "/stats/getPageviews/",
    uniques: "/stats/getUniques/",
    browserShare: "/stats/getBrowserShare/",
    topSearchTerms: "/stats/getTopSearchTerms/",
    mostVisitedPages: "/stats/getMostVisitedPages/"
  };
  xhrFailure = function() {
    throw new Error("StatsProxy: Asynchronous request for stats failed.");
  };
  fetchData = function(url, dataCallback, startDate, endDate, page) {
    var getVars;
    callback = {
      success: function(responseText) {
        var stats;
        stats = eval("(" + responseText + ")");
        return dataCallback(stats);
      },
      failure: xhrFailure
    };
    getVars = [];
    if (startDate) {
      getVars.push("startDate=" + (encodeURI(startDate)));
    }
    if (endDate) {
      getVars.push("startDate=" + (encodeURI(endDate)));
    }
    if (page) {
      getVars.push("page=" + page);
    }
    url = "" + url + "?" + (getVars.join('&'));
    return xhrHandler.request("GET", url, callback);
  };
  return {
    getPageviews: function(callback, startDate, endDate, page) {
      return fetchData(urls.pageviews, callback, startDate, endDate, page);
    },
    getUniques: function(callback, startDate, endDate, page) {
      return fetchData(urls.uniques, callback, startDate, endDate, page);
    },
    getBrowserShare: function(callback, startDate, endDate, page) {
      return fetchData(urls.browserShare, callback, startDate, endDate, page);
    },
    getTopSearchTerms: function(callback, startDate, endDate, page) {
      return fetchData(urls.topSearchTerms, callback, startDate, endDate, page);
    },
    getMostVisitedPages: function(callback, startDate, endDate, page) {
      return fetchData(urls.mostVisitedPages, callback, startDate, endDate, page);
    }
  };
})();

WebService = (function() {
  function WebService() {}

  WebService.xhrHandler = XhrManager.createXhrHandler();

  WebService.prototype._xhrFailure = function(statusCode) {
    throw new Error("StatsProxy: Asynchronous request for stats failed.");
  };

  WebService.prototype._fetchData = function(url, dataCallback, getVars) {
    var getVar, getVarArray, key;
    callback = {
      success: function(responseText) {
        var obj;
        obj = eval("(" + responseText + ")");
        return dataCallback(obj);
      },
      failure: ((function(_this) {
        return function() {
          return _this._xhrFailure;
        };
      })(this))()
    };
    getVarArray = [];
    for (key in getVars) {
      getVar = getVars[key];
      getVarArray.push("" + varName + "=" + getVar);
    }
    url = "" + url + "?" + (getVarArray.join('&'));
    return xhrHandler.request("GET", url, callback);
  };

  return WebService;

})();

StatsProxy = (function() {
  function StatsProxy() {}

  StatsProxy.prototype.getPageviews = function(callback, startDate, endDate, page) {
    return this._fetchData("/stats/getPageviews/", callback, {
      startDate: startDate,
      endDate: endDate,
      page: page
    });
  };

  StatsProxy.prototype.getUniques = function(callback, startDate, endDate, page) {
    return this._fetchData("/stats/getUniques/", callback, {
      startDate: startDate,
      endDate: endDate,
      page: page
    });
  };

  StatsProxy.prototype.getBrowserShare = function(callback, startDate, endDate, page) {
    return this._fetchData("/stats/getBrowserShare/", callback, {
      startDate: startDate,
      endDate: endDate,
      page: page
    });
  };

  StatsProxy.prototype.getTopSearchTerms = function(callback, startDate, endDate, page) {
    return this._fetchData("/stats/getTopSearchTerms/", callback, {
      startDate: startDate,
      endDate: endDate,
      page: page
    });
  };

  StatsProxy.prototype.getMostVisitedPages = function(callback, startDate, endDate, page) {
    return this._fetchData("/stats/getMostVisitedPages/", callback, {
      startDate: startDate,
      endDate: endDate,
      page: page
    });
  };

  return StatsProxy;

})();

PersonnelDirectory = (function() {
  function PersonnelDirectory(parent) {
    this.parent = parent;
    this.xhrHandler = XhrManager.createXhrHandler();
    callback = {
      success: this._configure,
      failture: function() {
        throw new Error("PersonnelDirectory: failture in data retrivial.");
      }
    };
    xhrHandler.request("GET", "directoryData.php", callback);
  }

  PersonnelDirectory.prototype._configure = function(responseText) {
    this.data = eval("(" + responseText + ")");
    return this.currentPage = "a";
  };

  PersonnelDirectory.prototype.showPage = function(page) {
    document.querySelector("[page-" + this.currentPage + "]").style.display = "none";
    document.querySelector("[page-" + page + "]").style.display = "block";
    return this.currentPage = page;
  };

  return PersonnelDirectory;

})();

DirectoryProxy = (function() {
  function DirectoryProxy(parent) {
    this.parent = parent;
    addEvent(parent, "mouseover", this._initialize);
  }

  DirectoryProxy.prototype._initialize = function() {
    this.warning = document.createElement("div");
    this.parent.appendChild(this.warning);
    this.warning.innerHTML = "The company directory is loading...";
    this.directory = new PersonnelDirectory(this.parent);
    return this.interval = setInterval((function(_this) {
      return function() {
        return _this._checkInitialization;
      };
    })(this), 100);
  };

  DirectoryProxy.prototype._checkInitialization = function() {
    if (this.directory.currentPage) {
      clearInterval(this.interval);
      this.initialized = true;
      return this.parent.removeChild(this.warning);
    }
  };

  DirectoryProxy.prototype.showPage = function(page) {
    if (!this.initialized) {
      return this.directory.showPage(page);
    }
  };

  return DirectoryProxy;

})();

DynamicProxy = (function() {
  function DynamicProxy() {
    var key, prop, _ref;
    this.args = arguments;
    if (typeof this["class"] !== "function") {
      throw new Error("DynamicProxy: the class attribute must be set before calling the super-class consructor.");
    }
    _ref = this["class"].prototype;
    for (key in _ref) {
      prop = _ref[key];
      if (typeof prop === "function") {
        (function(_this) {
          return (function(key) {
            return _this[key] = function() {
              if (this.initialized) {
                return this.subject[key].apply(this.subject, arguments);
              }
            };
          });
        })(this)(key);
      }
    }
  }

  DynamicProxy.prototype._initialize = function() {
    this.subject = {};
    this["class"].apply(this.subject, this.args);
    this.subject.__proto__ = this["class"].prototype;
    return this.interval = setInterval((function(_this) {
      return function() {
        return _this._checkInitialization();
      };
    })(this), 100);
  };

  DynamicProxy.prototype._checkInitialization = function() {
    if (this._isInitialized()) {
      clearInterval(this.interval);
      return this.initialized = true;
    }
  };

  DynamicProxy.prototype._initialized = function() {
    throw new Error("Unsupported operation on an abstract class.");
  };

  return DynamicProxy;

})();

TestProxy = (function(_super) {
  var _isInitialized;

  __extends(TestProxy, _super);

  function TestProxy() {
    this["class"] = TestClass;
    addEvent(document.querySelector("test-link", "click", (function(_this) {
      return function() {
        return _this._initialize();
      };
    })(this)));
    TestProxy.__super__.constructor.call(this, arguments);
  }

  _isInitialized = function() {};

  return TestProxy;

})(DynamicProxy);
