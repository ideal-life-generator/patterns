// Generated by CoffeeScript 1.8.0
var FeedManager, FeedReader, ListDisplay, conf,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

ListDisplay = (function() {
  function ListDisplay(id, parent) {
    this.list = document.createElement("ul");
    this.list.id = id;
    parent.appendChild(this.list);
  }

  ListDisplay.prototype.append = function(text) {
    var newEl;
    newEl = document.createElement("li");
    this.list.appendChild(newEl);
    newEl.innerHTML = text;
    return newEl;
  };

  ListDisplay.prototype.remove = function(el) {
    return this.list.removeChild(el);
  };

  ListDisplay.prototype.clear = function() {
    return this.list.innerHTML = "";
  };

  return ListDisplay;

})();

conf = {
  id: "cnn-top-stories",
  feedUrl: "http://rss.cnn.com/rss/cnn_topstories.rss",
  updateInterval: 60,
  parent: document.querySelector("#feed-readers")
};

FeedReader = (function(_super) {
  __extends(FeedReader, _super);

  function FeedReader() {
    return FeedReader.__super__.constructor.apply(this, arguments);
  }

  FeedReader.prototype.construnctor = function(display, xhrHandler, conf) {
    this.display = display;
    this.xhrHandler = xhrHandler;
    this.conf = conf;
    return this.startUpdate();
  };

  FeedReader.prototype.fetchFeed = function() {
    return this.request({
      method: "GET",
      url: "feedProxy.php?feed=" + this.conf.feedUrl,
      callback: {
        success: (function(_this) {
          return function(text, xml) {
            return _this.parseFeed(text, xml);
          };
        })(this),
        error: (function(_this) {
          return function(status) {
            return _this.showError(status);
          };
        })(this)
      }
    });
  };

  FeedReader.prototype.parseFeed = function(responseText, responseXML) {
    var item, items, link, title, _i, _len, _results;
    this.display.clear();
    items = responseXML.querySelector("[item]");
    _results = [];
    for (_i = 0, _len = items.length; _i < _len; _i++) {
      item = items[_i];
      title = item.querySelector("[title]");
      link = item.querySelector("[link]");
      _results.push(this.display.append("<a href='" + link.firstChild.data + "'>" + title.firstChild.data + "</a>"));
    }
    return _results;
  };

  FeedReader.prototype.showError = function(statusCode) {
    this.display.clear();
    return this.display.append("Error fetching feed.");
  };

  FeedReader.prototype.stopUpdates = function() {
    return clearInterval(this.interval);
  };

  FeedReader.prototype.startUpdate = function() {
    this.fetchFeed();
    return this.interval = setInterval((function(_this) {
      return function() {
        return _this.fetchFeed();
      };
    })(this), this.conf.updateInterval * 1000);
  };

  return FeedReader;

})(XhrMnager);

FeedManager = {
  createFeedReader: function(conf) {
    var displayModule, xhrHandler;
    displayModule = new ListDisplay(conf.id + "-display", conf.parent);
    xhrHandler = XhrMnager.createXhrHandler();
    return new FeedReader(displayModule, xhrHandler, conf);
  }
};
